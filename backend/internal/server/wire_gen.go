// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"erp-system/internal/biz"
	"erp-system/internal/conf"
	"erp-system/internal/data"
	"erp-system/internal/pkg"
	"erp-system/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/google/wire"
	"time"
)

// Injectors from wire.go:

// InitializeApp 初始化应用
func InitializeApp(server *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, logger)
	jwtManager := NewJWTManager(confData)
	passwordManager := pkg.NewPasswordManager()
	authService := service.NewAuthService(userUsecase, jwtManager, passwordManager, logger)
	userService := service.NewUserService(userUsecase, passwordManager, logger)
	roleRepo := data.NewRoleRepo(dataData, logger)
	roleUsecase := biz.NewRoleUsecase(roleRepo, logger)
	roleService := service.NewRoleService(roleUsecase, logger)
	// permissionRepo := data.NewPermissionRepo(dataData, logger)
	// permissionUsecase := biz.NewPermissionUsecase(permissionRepo, logger)
	// permissionService := service.NewPermissionService(permissionUsecase, logger)  // Temporarily disabled
	organizationRepo := data.NewOrganizationRepo(dataData, logger)
	organizationUsecase := biz.NewOrganizationUsecase(organizationRepo, logger)
	organizationService := service.NewOrganizationService(organizationUsecase, logger)
	auditRepo := data.NewAuditRepo(dataData, logger)
	auditUsecase := biz.NewAuditUsecase(auditRepo, logger)
	systemService := service.NewSystemService(auditUsecase, logger)
	httpServer := NewHTTPServer(server, confData, authService, userService, roleService /* permissionService, */, organizationService, systemService, logger)
	grpcServer := NewGRPCServer(server, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

// ProviderSet 是所有提供者的集合
var ProviderSet = wire.NewSet(data.ProviderSet, biz.NewUserUsecase, biz.NewRoleUsecase, biz.NewPermissionUsecase, biz.NewOrganizationUsecase, biz.NewAuditUsecase, service.NewAuthService, service.NewUserService, service.NewRoleService /* service.NewPermissionService, */, service.NewOrganizationService, service.NewSystemService, pkg.NewPasswordManager, NewJWTManager,

	NewHTTPServer,
	NewGRPCServer,
)

// NewJWTManager 创建JWT管理器
func NewJWTManager(c *conf.Data) *pkg.JWTManager {

	secretKey := "dev-jwt-secret-key-for-testing-only"
	if c.Jwt != nil && c.Jwt.SecretKey != "" {
		secretKey = c.Jwt.SecretKey
	}

	tokenDuration := time.Hour * 2
	if c.Jwt != nil && c.Jwt.AccessTokenExpire > 0 {
		tokenDuration = time.Duration(c.Jwt.AccessTokenExpire) * time.Second
	}

	return pkg.NewJWTManager(secretKey, tokenDuration)
}

// newApp 创建Kratos应用实例
func newApp(logger log.Logger, hs *HTTPServer, gs *GRPCServer) *kratos.App {
	return kratos.New(kratos.Name("erp-system"), kratos.Version("v1.0.0"), kratos.Logger(logger), kratos.Server(
		hs.Server,
		gs.Server,
	),
	)
}
