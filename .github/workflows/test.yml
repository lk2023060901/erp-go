name: Test ERP System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'

jobs:
  # 代码质量检查
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: backend
      run: go mod download

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run Go lint
      working-directory: backend
      run: |
        go vet ./...
        go fmt ./...
        # Check if any files were modified by fmt
        if [ -n "$(git diff --name-only)" ]; then
          echo "Code is not properly formatted"
          git diff
          exit 1
        fi

    - name: Run frontend lint
      working-directory: frontend
      run: npm run lint

  # 单元测试
  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      working-directory: backend
      run: go mod download

    - name: Run unit tests
      working-directory: backend
      run: |
        go test -v -race -coverprofile=coverage.out ./internal/...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: backend/coverage.*

  # 集成测试
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: erp_test_db
          POSTGRES_USER: erp_test_user  
          POSTGRES_PASSWORD: erp_test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      working-directory: backend
      run: go mod download

    - name: Setup test database
      env:
        DATABASE_URL: postgres://erp_test_user:erp_test_pass@localhost:5432/erp_test_db?sslmode=disable
      run: |
        # Wait for services to be ready
        sleep 10
        
        # Run database initialization
        cd backend
        # Initialize database schema and seed data
        PGPASSWORD=erp_test_pass psql -h localhost -U erp_test_user -d erp_test_db -f ../database/schema/core_system.sql || true
        PGPASSWORD=erp_test_pass psql -h localhost -U erp_test_user -d erp_test_db -f ../database/schema/permission_system.sql || true
        PGPASSWORD=erp_test_pass psql -h localhost -U erp_test_user -d erp_test_db -f ../database/data/core_seed.sql || true
        PGPASSWORD=erp_test_pass psql -h localhost -U erp_test_user -d erp_test_db -f ../database/data/permission_seed.sql || true

    - name: Run integration tests
      working-directory: backend
      env:
        DATABASE_URL: postgres://erp_test_user:erp_test_pass@localhost:5432/erp_test_db?sslmode=disable
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret-key-for-ci
      run: |
        go test -v -tags=integration ./tests/integration/...

  # 构建测试
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      working-directory: backend
      run: go mod download

    - name: Install frontend dependencies  
      working-directory: frontend
      run: npm ci

    - name: Build backend
      working-directory: backend
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server cmd/server/main.go

    - name: Build frontend
      working-directory: frontend
      run: npm run build

    - name: Test Docker build
      run: |
        # Test backend Docker build
        docker build -t erp-backend:test backend/
        
        # Test frontend Docker build  
        docker build -t erp-frontend:test frontend/

  # 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './backend/...'

    - name: Run npm audit
      working-directory: frontend
      run: |
        npm install
        npm audit --audit-level moderate

  # 性能测试（仅在main分支）
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build-test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: erp_perf_db
          POSTGRES_USER: erp_perf_user
          POSTGRES_PASSWORD: erp_perf_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      working-directory: backend
      run: go mod download

    - name: Run performance benchmarks
      working-directory: backend
      env:
        DATABASE_URL: postgres://erp_perf_user:erp_perf_pass@localhost:5432/erp_perf_db?sslmode=disable
        REDIS_URL: redis://localhost:6379
      run: |
        go test -bench=. -benchmem ./internal/service/... > bench_results.txt
        go test -bench=. -benchmem ./tests/integration/... >> bench_results.txt
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: backend/bench_results.txt